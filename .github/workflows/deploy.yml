name: Deploy Uranabot

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: usebooz/uranabot

jobs:
  # --- 1) TEST ---
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

  # --- 2) BUILD & PUSH (GHCR) ---
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # --- 3) DEPLOY (build on server with compose) ---
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # формируем .env из vars/secrets (только перечисленное тобой)
      - name: Create .env from vars & secrets
        run: |
          cat > .env <<'EOF'
          NODE_ENV=production
          LOG_LEVEL=info
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}

          SPORTS_API_URL=${{ vars.SPORTS_API_URL }}
          SPORTS_API_PATH=${{ vars.SPORTS_API_PATH }}
          SPORTS_TOURNAMENT_RPL=${{ vars.SPORTS_TOURNAMENT_RPL }}

          URANAWEB_APP_URL=${{ vars.URANAWEB_APP_URL }}
          URANAWEB_APP_PATH=${{ vars.URANAWEB_APP_PATH }}

          URANA_API_URL=${{ vars.URANA_API_URL }}
          URANA_API_PATH=${{ vars.URANA_API_PATH }}
          EOF

      - name: Prep SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Prepare deploy dir on server
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa ${USERNAME}@${HOST} \
            'sudo mkdir -p /opt/uranaspace && sudo chown $(whoami):$(whoami) /opt/uranaspace'

      - name: Sync project to VPS (rsync)
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_rsa" \
            --exclude '.git' \
            --exclude 'node_modules' \
            ./ ${USERNAME}@${HOST}:/opt/uranaspace/

          rsync -az -e "ssh -i ~/.ssh/id_rsa" .env ${USERNAME}@${HOST}:/opt/uranaspace/.env

      - name: Compose up (build on server, zero-downtime)
        env:
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          ssh -i ~/.ssh/id_rsa ${USERNAME}@${HOST} <<'EOSSH'
            set -euo pipefail
            cd /opt/uranaspace

            # обновим репозиторий, если он git-клонирован (иначе rsync уже внёс все изменения)
            if [ -d .git ]; then
              git fetch --prune || true
              git reset --hard || true
            fi

            # тянем/собираем и поднимаем без down
            docker compose up -d --build

            # краткий статус и свежие логи (без секретов)
            docker compose ps
            docker compose logs --tail=50 || true

            # чистка висячих слоёв
            docker image prune -f || true
          EOSSH

  # --- 4) HEALTH CHECK ---
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Health probe over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            cd /opt/uranaspace

            echo "=== ps ==="
            docker compose ps -a

            echo "=== wait app ==="
            sleep 20

            echo "=== recent logs ==="
            docker compose logs --tail=60 || true

            echo "=== container health ==="
            if ! docker compose ps | grep -E 'uranabot.*Up'; then
              echo "❌ uranabot is not Up"; exit 1
            fi
            if ! docker compose ps | grep -E 'caddy|uranaapi' | grep -q 'Up'; then
              echo "❌ uranaapi is not Up"; exit 1
            fi

            echo "Running healthcheck scripts..."
            docker compose exec -T uranabot node scripts/healthcheck.js || (echo "Health check failed" && exit 1)
            bash scripts/healthcheck_uranaapi.sh /opt/uranaspace

            echo "✅ OK"
