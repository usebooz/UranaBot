name: Deploy Uranabot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: usebooz/uranabot

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run type check
      run: npm run type-check

    - name: Build project
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          # Создать директорию проекта если не существует
          sudo mkdir -p /opt/uranabot
          sudo chown $(whoami):$(whoami) /opt/uranabot
          cd /opt/uranabot
          
          # Остановить существующий контейнер
          docker compose down || true
          
          # Попробовать загрузить образ
          echo "=== Trying to pull image ==="
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest; then
            echo "✅ Image pulled successfully"
            USE_REMOTE_IMAGE=true
          else
            echo "❌ Failed to pull image, will build locally"
            USE_REMOTE_IMAGE=false
          fi
          
          # Создать docker-compose.yml в зависимости от способа запуска
          if [ "$USE_REMOTE_IMAGE" = true ]; then
            echo "=== Creating docker-compose.yml with remote image ==="
            cat > docker-compose.yml << 'EOF'
          services:
            uranabot:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              environment:
                - NODE_ENV=production
                - BOT_TOKEN=${{ secrets.BOT_TOKEN }}
                - LOG_LEVEL=info
              restart: unless-stopped
              networks:
                - uranabot-network
              healthcheck:
                test: ["CMD", "node", "dist/healthcheck.js"]
                interval: 30s
                timeout: 3s
                start_period: 5s
                retries: 3

          networks:
            uranabot-network:
              driver: bridge

          volumes:
            uranabot-data:
          EOF
          else
            echo "=== Creating docker-compose.yml with local build ==="
            # Сначала клонируем репозиторий для локальной сборки
            git clone https://github.com/${{ github.repository }}.git . || git pull
            cat > docker-compose.yml << 'EOF'
          services:
            uranabot:
              build:
                context: .
                dockerfile: Dockerfile
              environment:
                - NODE_ENV=production
                - BOT_TOKEN=${{ secrets.BOT_TOKEN }}
                - LOG_LEVEL=info
              restart: unless-stopped
              networks:
                - uranabot-network
              healthcheck:
                test: ["CMD", "node", "dist/healthcheck.js"]
                interval: 30s
                timeout: 3s
                start_period: 5s
                retries: 3

          networks:
            uranabot-network:
              driver: bridge

          volumes:
            uranabot-data:
          EOF
          fi

          # Создать .env файл
          cat > .env << 'EOF'
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          NODE_ENV=production
          LOG_LEVEL=info
          EOF
          
          # Запустить новый контейнер
          echo "=== Starting container ==="
          docker compose up -d
          
          # Проверить результат запуска
          echo "=== Docker Compose Up Result ==="
          echo "Exit code: $?"
          
          # Показать статус
          echo "=== Container Status ==="
          docker compose ps -a
          
          echo "=== Container Logs ==="
          docker compose logs --tail=50
          
          echo "=== Available Images ==="
          docker images | grep uranabot || echo "No uranabot images found"
          
          echo "=== Docker Compose Config ==="
          cat docker-compose.yml
          
          echo "=== Environment File ==="
          cat .env
          
          # Очистка старых образов
          docker image prune -f

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment and health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          cd /opt/uranabot
          
          # Проверяем что контейнер запустился
          echo "=== Immediate Container Status ==="
          docker compose ps -a
          
          # Проверяем логи запуска
          echo "=== Startup Logs ==="
          docker compose logs --tail=50
          
          # Ждем запуска контейнера
          echo "Waiting for container to fully start..."
          sleep 30
          
          # Проверяем статус контейнеров снова
          echo "=== Container Status After Wait ==="
          docker compose ps -a
          
          # Проверяем логи после ожидания
          echo "=== Recent Logs ==="
          docker compose logs --tail=30
          
          # Проверяем health check только если контейнер запущен
          echo "=== Health Check ==="
          if docker compose ps | grep -q "Up"; then
            echo "✅ Container is running, executing health check..."
            docker compose exec -T uranabot node dist/healthcheck.js || echo "Health check failed"
          else
            echo "❌ Container is not running, skipping health check"
          fi
          
          # Проверяем что бот отвечает
          echo "=== Bot Status ==="
          if docker compose logs | grep -q "Bot commands set successfully"; then
            echo "✅ Bot is running successfully!"
          else
            echo "❌ Bot may not be running properly"
            exit 1
          fi
