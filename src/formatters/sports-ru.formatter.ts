import type { GetTournamentInfoQuery } from '../gql';

// Type alias for convenience
type Tournament = NonNullable<
  GetTournamentInfoQuery['fantasyQueries']['tournament']
>;

/**
 * Formatter for presenting Sports.ru data to users
 * Handles all text formatting and message generation for the bot
 */
export class SportsRuFormatter {
  /**
   * Format tournament info for display in bot messages
   */
  formatTournamentInfo(tournament: Tournament): string {
    const { currentSeason } = tournament;

    if (!currentSeason) {
      return `üèÜ ${tournament.metaTitle}\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞`;
    }

    const { currentTour, statObject } = currentSeason;

    if (!currentTour) {
      return `üèÜ ${tournament.metaTitle}\nüìÖ –°–µ–∑–æ–Ω: ${statObject.name} (${statObject.year})\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–∞`;
    }

    return `üèÜ ${tournament.metaTitle}
üìÖ –°–µ–∑–æ–Ω: ${statObject.name} (${statObject.year})
üéØ –¢–µ–∫—É—â–∏–π —Ç—É—Ä: ${currentTour.name}
üìä –°—Ç–∞—Ç—É—Å: ${this.formatTourStatus(currentTour.status)}
‚è∞ –ù–∞—á–∞–ª–æ: ${this.formatDate(currentTour.startedAt)}
‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${this.formatDate(currentTour.finishedAt)}`;
  }

  /**
   * Format tournament status with appropriate emoji
   */
  private formatTourStatus(status: string): string {
    switch (status.toLowerCase()) {
      case 'active':
      case '–∞–∫—Ç–∏–≤–µ–Ω':
        return 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω';
      case 'finished':
      case '–∑–∞–≤–µ—Ä—à–µ–Ω':
        return 'üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω';
      case 'upcoming':
      case '–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π':
        return 'üü° –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π';
      default:
        return `‚ö™ ${status}`;
    }
  }

  /**
   * Format date for display
   */
  private formatDate(date: string | null | undefined): string {
    if (!date) {
      return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }

    try {
      return new Date(date).toLocaleDateString('ru-RU');
    } catch {
      return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
  }

  /**
   * Format error message for users
   */
  formatErrorMessage(error: string): string {
    return `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error}`;
  }

  /**
   * Format "no data" message
   */
  formatNoDataMessage(): string {
    return 'üì≠ –î–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }

  /**
   * Format loading message
   */
  formatLoadingMessage(): string {
    return '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ...';
  }
}

// Export singleton instance
export const sportsRuFormatter = new SportsRuFormatter();
